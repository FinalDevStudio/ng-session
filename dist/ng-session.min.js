!function(n){"use strict";function s(n,s,e){function r(s,e){n.session.user=e.data,s.resolve(e)}function i(n){return c(null,n)}function t(s,e){n.session.user=null,s.resolve(e)}function o(r,t){var o=e.defer();return n.session.user=null,s.post(u.signInUrl,r,t).then(i.bind(null,o))["catch"](o.reject),o.promise}function l(n,r){var i=e.defer();return s.post(u.signOutUrl,n,r).then(t.bind(null,i))["catch"](i.reject),i.promise}function c(n,i){return i||(i=e.defer()),s.get(u.updateUrl,n||{}).then(r.bind(null,i))["catch"](i.reject),i.promise}function g(s){return s&&n.session.user?n.session.user[s]:n.session.user}function a(s){return n.session[s]}function d(s,e){n.session[s]=e}function f(s){delete n.session[s]}n.session={};var p={signOut:l,signIn:o,update:c,user:g,get:a,set:d,del:f};return p}function e(n){n.update()}function r(n){t.isString(n.updateUrl)&&(u.updateUrl=n.updateUrl),t.isString(n.signInUrl)&&(u.signInUrl=n.signInUrl),t.isString(n.signOutUrl)&&(u.signOutUrl=n.signOutUrl)}function i(){return o}var t=n.angular,u={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session"},o={configure:r,$get:["$rootScope","$http","$q",s]};t.module("ngSession",[]).provider("ngSession",i).run(["ngSession",e])}(window);
//# sourceMappingURL=data:application/json;base64,
