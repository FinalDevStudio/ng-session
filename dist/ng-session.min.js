!function(e){"use strict";var r,c=window.angular,l={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session",cache:!1};var s=["ngSession","$q",function(e,n){if(c.isDate(r)){if("boolean"==typeof cfg.cache&&l.cache)return n.resolve();if(c.isNumber(l.cache)&&r.valueOf()+l.cache<Date.now())return n.resolve()}return e.update()}];var n={configure:function(e){c.isString(e.updateUrl)&&(l.updateUrl=e.updateUrl),c.isString(e.signInUrl)&&(l.signInUrl=e.signInUrl),c.isString(e.signOutUrl)&&(l.signOutUrl=e.signOutUrl),(c.isNumber(e.cache)||"boolean"==typeof e.cache)&&(l.cache=e.cache)},$get:["$rootScope","$http","$q",function(s,t,i){function u(e,n){return n||(n=i.defer()),t.get(l.updateUrl,e).then(function(e,n){s.session.user=n.data,r=new Date,e.resolve(n)}.bind(null,n)).catch(n.reject),n.promise}function o(e){var n=s.session;return n?e&&n.user?n.user[e]:n.user:null}return s.session={},{hasRole:function(e,n){var r=o("roles"),s=0;if(!r||!r.length)return!1;c.isString(r)&&(r=[r]),c.isString(e)&&(e=[e]);for(var t=0,i=e.length;t<i;t++)-1<r.indexOf(e[t])&&s++;return n?s===e.length:!!s},signOut:function(e,n){var r=i.defer();return t.post(l.signOutUrl,e,n).then(function(e,n){s.session.user=null,e.resolve(n)}.bind(null,r)).catch(r.reject),r.promise},signIn:function(e,n){var r=i.defer();return s.session.user=null,t.post(l.signInUrl,e,n).then(function(e){return u(null,e)}.bind(null,r)).catch(r.reject),r.promise},reload:function(e,n,r){return r||(r=i.defer()),t.put(l.updateUrl,e,n).then(u.bind(null,n,r)).catch(r.reject),r.promise},update:u,user:o,get:function(e){return s.session[e]},set:function(e,n){s.session[e]=n},del:function(e){delete s.session[e]}}}]};c.module("ngSession",[]).provider("ngSession",function(){return n}).run(["$route",function(e){for(var n in e.routes){var r=e.routes[n];c.isObject(r.resolve)||(r.resolve={}),r.resolve._session=s}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
