!function(e){"use strict";var s,l=window.angular,a={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session",cache:!1};var r=["ngSession",function(e){if(console.log("Resolving session..."),l.isDate(s)){if(console.log("Updated at is date..."),"boolean"==typeof a.cache&&a.cache)return void console.log("Cache is boolean and should not update...");if(l.isNumber(a.cache)&&s.valueOf()+a.cache>Date.now())return void console.log("Cache is number and should not update...")}return console.log("Updated at is",typeof s),e.update()}];var n={configure:function(e){l.isString(e.updateUrl)&&(a.updateUrl=e.updateUrl),l.isString(e.signInUrl)&&(a.signInUrl=e.signInUrl),l.isString(e.signOutUrl)&&(a.signOutUrl=e.signOutUrl),(l.isNumber(e.cache)||"boolean"==typeof e.cache)&&(a.cache=e.cache)},$get:["$rootScope","$http","$q",function(r,t,o){function i(e,n){return n||(n=o.defer()),t.get(a.updateUrl,e).then(function(e,n){r.session.user=n.data,s=new Date,e.resolve(n)}.bind(null,n),n.reject),n.promise}function u(e){var n=r.session;return n?e&&n.user?n.user[e]:n.user:null}return r.session={},{hasRole:function(e,n){var s=u("roles"),r=0;if(!s||!s.length)return!1;l.isString(s)&&(s=[s]),l.isString(e)&&(e=[e]);for(var t=0,o=e.length;t<o;t++)-1<s.indexOf(e[t])&&r++;return n?r===e.length:!!r},signOut:function(e,n){var s=o.defer();return t.post(a.signOutUrl,e,n).then(function(e,n){r.session.user=null,e.resolve(n)}.bind(null,s),s.reject),s.promise},signIn:function(e,n){var s=o.defer();return r.session.user=null,t.post(a.signInUrl,e,n).then(function(e){return i(null,e)}.bind(null,s),s.reject),s.promise},reload:function(e,n,s){return s||(s=o.defer()),t.put(a.updateUrl,e,n).then(i.bind(null,n,s),s.reject),s.promise},update:i,user:u,get:function(e){return r.session[e]},set:function(e,n){r.session[e]=n},del:function(e){delete r.session[e]}}}]};l.module("ngSession",[]).provider("ngSession",function(){return n}).run(["$route",function(e){for(var n in e.routes){var s=e.routes[n];l.isObject(s.resolve)||(s.resolve={}),s.resolve._session=r}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
