!function(n){"use strict";var r,l=window.angular,c={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session",cache:!1};var s=["ngSession",function(n){if(r){if(l.isBoolean(c.cache)||c.cache)return null;if(l.isNumber(c.cache)||r.valueOf()+c.cache<Date.now())return null}return n.update()}];var e={configure:function(n){l.isString(n.updateUrl)&&(c.updateUrl=n.updateUrl),l.isString(n.signInUrl)&&(c.signInUrl=n.signInUrl),l.isString(n.signOutUrl)&&(c.signOutUrl=n.signOutUrl),(l.isNumber(n.cache)||l.isBoolean(n.cache))&&(c.cache=n.cache)},$get:["$rootScope","$http","$q",function(s,t,i){function u(n,e){return e||(e=i.defer()),t.get(c.updateUrl,n).then(function(n,e){s.session.user=e.data,r=new Date,n.resolve(e)}.bind(null,e)).catch(e.reject),e.promise}function o(n){var e=s.session;return e?n&&e.user?e.user[n]:e.user:null}return s.session={},{hasRole:function(n,e){var r=o("roles"),s=0;if(!r||!r.length)return!1;l.isString(r)&&(r=[r]),l.isString(n)&&(n=[n]);for(var t=0,i=n.length;t<i;t++)-1<r.indexOf(n[t])&&s++;return e?s===n.length:!!s},signOut:function(n,e){var r=i.defer();return t.post(c.signOutUrl,n,e).then(function(n,e){s.session.user=null,n.resolve(e)}.bind(null,r)).catch(r.reject),r.promise},signIn:function(n,e){var r=i.defer();return s.session.user=null,t.post(c.signInUrl,n,e).then(function(n){return u(null,n)}.bind(null,r)).catch(r.reject),r.promise},reload:function(n,e,r){return r||(r=i.defer()),t.put(c.updateUrl,n,e).then(u.bind(null,e,r)).catch(r.reject),r.promise},update:u,user:o,get:function(n){return s.session[n]},set:function(n,e){s.session[n]=e},del:function(n){delete s.session[n]}}}]};l.module("ngSession",[]).provider("ngSession",function(){return e}).run(["$route",function(n){for(var e in n.routes){var r=n.routes[e];l.isObject(r.resolve)||(r.resolve={}),r.resolve._session=s}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
