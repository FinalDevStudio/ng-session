!function(n){"use strict";function e(n,e,r){function s(e,r){n.session.user=r.data,e.resolve(r)}function t(n){return c(null,n)}function o(e,r){n.session.user=null,e.resolve(r)}function l(s,i){var o=r.defer();return n.session.user=null,e.post(u.signInUrl,s,i).then(t.bind(null,o)).catch(o.reject),o.promise}function g(n,s){var t=r.defer();return e.post(u.signOutUrl,n,s).then(o.bind(null,t)).catch(t.reject),t.promise}function c(n,t){return t||(t=r.defer()),e.get(u.updateUrl,n||{}).then(s.bind(null,t)).catch(t.reject),t.promise}function a(e){var r=n.session;return r?e&&r.user?r.user[e]:r.user:null}function f(n,e){var r=a("roles"),s=0;if(!r||!r.length)return!1;i.isString(r)&&(r=[r]),i.isString(n)&&(n=[n]);for(var t=0,u=n.length;t<u;t++)r.indexOf(n[t])>-1&&s++;return e?s===n.length:!!s}function d(e,r){n.session[e]=r}function p(e){return n.session[e]}function U(e){delete n.session[e]}n.session={};var h={hasRole:f,signOut:g,signIn:l,update:c,user:a,get:p,set:d,del:U};return h}function r(n){n.update()}function s(n){i.isString(n.updateUrl)&&(u.updateUrl=n.updateUrl),i.isString(n.signInUrl)&&(u.signInUrl=n.signInUrl),i.isString(n.signOutUrl)&&(u.signOutUrl=n.signOutUrl)}function t(){return o}var i=n.angular,u={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session"},o={configure:s,$get:["$rootScope","$http","$q",e]};i.module("ngSession",[]).provider("ngSession",t).run(["ngSession",r])}(window);
//# sourceMappingURL=data:application/json;base64,
