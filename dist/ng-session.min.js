!function(n){"use strict";function e(n,e,r){function s(e,r){n.session.user=r.data,e.resolve(r)}function t(n){return g(null,n)}function i(e,r){n.session.user=null,e.resolve(r)}function l(s,i){var u=r.defer();return n.session.user=null,e.post(o.signInUrl,s,i).then(t.bind(null,u)).catch(u.reject),u.promise}function c(n,s){var t=r.defer();return e.post(o.signOutUrl,n,s).then(i.bind(null,t)).catch(t.reject),t.promise}function a(n,s,t){return t||(t=r.defer()),e.put(o.updateUrl,n,s||{}).then(g.bind(null,s,t)).catch(t.reject),t.promise}function g(n,t){return t||(t=r.defer()),e.get(o.updateUrl,n||{}).then(s.bind(null,t)).catch(t.reject),t.promise}function f(e){var r=n.session;return r?e&&r.user?r.user[e]:r.user:null}function d(n,e){var r=f("roles"),s=0;if(!r||!r.length)return!1;u.isString(r)&&(r=[r]),u.isString(n)&&(n=[n]);for(var t=0,i=n.length;t<i;t++)r.indexOf(n[t])>-1&&s++;return e?s===n.length:!!s}function p(e,r){n.session[e]=r}function U(e){return n.session[e]}function v(e){delete n.session[e]}n.session={};var h={hasRole:d,signOut:c,signIn:l,reload:a,update:g,user:f,get:U,set:p,del:v};return h}function r(n){return n.update({cache:!0})}function s(n){for(var e in n.routes){var r=n.routes[e];u.isObject(r.resolve)||(r.resolve={}),r.resolve.ngSession=l}}function t(n){u.isString(n.updateUrl)&&(o.updateUrl=n.updateUrl),u.isString(n.signInUrl)&&(o.signInUrl=n.signInUrl),u.isString(n.signOutUrl)&&(o.signOutUrl=n.signOutUrl)}function i(){return c}var u=n.angular,o={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session"},l=["ngSession",r],c={configure:t,$get:["$rootScope","$http","$q",e]};u.module("ngSession",[]).provider("ngSession",i).run(["$route",s])}(window);
//# sourceMappingURL=data:application/json;base64,
